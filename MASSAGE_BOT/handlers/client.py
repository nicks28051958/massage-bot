from aiogram import Router, types, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from sqlalchemy.future import select
from db import async_session
from models import MassageType, TimeSlot, Booking
from datetime import datetime, timedelta

router = Router()

class BookingFSM(StatesGroup):
    massage_id = State()
    date = State()
    slot = State()

def get_main_menu():
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text='üü¢ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞—Å—Å–∞–∂', callback_data='book')],
        [types.InlineKeyboardButton(text='‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—Å–∞–∂–µ', callback_data='info')],
        [types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data='cancel')],
        [types.InlineKeyboardButton(text='üïí –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å', callback_data='reschedule')],
        [types.InlineKeyboardButton(text='üîë –ó–∞–π—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', callback_data='admin')],
    ])

@router.message(F.text == "/start")
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞—Å—Å–∞–∂–Ω—ã–π —Å–∞–ª–æ–Ω!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=get_main_menu()
    )
    await state.clear()

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=get_main_menu()
    )
    await callback.answer()
    await state.clear()

# --- –ó–∞–ø–∏—Å—å –Ω–∞ –º–∞—Å—Å–∞–∂ ---
@router.callback_query(F.data == "book")
async def book_start(callback: types.CallbackQuery, state: FSMContext):
    async with async_session() as session:
        result = await session.execute(select(MassageType))
        massages = result.scalars().all()
    if not massages:
        await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–æ–≤ –º–∞—Å—Å–∞–∂–∞.")
        await callback.answer()
        return

    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text=m.name, callback_data=f"book_massage_{m.id}"),
                types.InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"book_choose_{m.id}")
            ] for m in massages
        ]
    )
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –º–∞—Å—Å–∞–∂–∞:", reply_markup=kb)
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("book_choose_"))
async def choose_massage(callback: types.CallbackQuery, state: FSMContext):
    massage_id = int(callback.data.replace("book_choose_", ""))
    async with async_session() as session:
        massage = await session.get(MassageType, massage_id)
    if not massage:
        await callback.message.answer("–ú–∞—Å—Å–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    await state.update_data(massage_id=massage_id)
    await show_calendar(callback.message, state)
    await callback.answer()

async def show_calendar(message, state):
    today = datetime.today()
    year = today.year
    month = today.month

    def get_calendar_keyboard(year, month):
        import calendar
        week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        cal = calendar.Calendar(firstweekday=0)
        kb = [ [types.InlineKeyboardButton(text=wd, callback_data="ignore") for wd in week_days] ]

        month_days = cal.monthdayscalendar(year, month)
        for week in month_days:
            row = []
            for d in week:
                if d == 0 or datetime(year, month, d) < today.replace(hour=0, minute=0, second=0, microsecond=0):
                    row.append(types.InlineKeyboardButton(text=" ", callback_data="ignore"))
                else:
                    date_str = f"{year}-{month:02d}-{d:02d}"
                    row.append(types.InlineKeyboardButton(text=str(d), callback_data=f"choose_date_{date_str}"))
            kb.append(row)
        nav = [
            types.InlineKeyboardButton(text="<", callback_data=f"calendar_prev_{year}_{month}"),
            types.InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="calendar_today"),
            types.InlineKeyboardButton(text=">", callback_data=f"calendar_next_{year}_{month}")
        ]
        kb.append(nav)
        return types.InlineKeyboardMarkup(inline_keyboard=kb)

    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:",
        reply_markup=get_calendar_keyboard(year, month)
    )
    await state.set_state(BookingFSM.date)

@router.callback_query(lambda c: c.data.startswith("calendar_prev_"))
async def calendar_prev_month(callback: types.CallbackQuery, state: FSMContext):
    _, _, year, month = callback.data.split("_")
    year = int(year)
    month = int(month)
    month -= 1
    if month < 1:
        month = 12
        year -= 1
    await show_calendar(callback.message, state)
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("calendar_next_"))
async def calendar_next_month(callback: types.CallbackQuery, state: FSMContext):
    _, _, year, month = callback.data.split("_")
    year = int(year)
    month = int(month)
    month += 1
    if month > 12:
        month = 1
        year += 1
    await show_calendar(callback.message, state)
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("choose_date_"))
async def choose_date(callback: types.CallbackQuery, state: FSMContext):
    date_str = callback.data.replace("choose_date_", "")
    date = datetime.strptime(date_str, "%Y-%m-%d")
    await state.update_data(date=date_str)
    async with async_session() as session:
        result = await session.execute(
            select(TimeSlot).where(
                TimeSlot.start_time >= date,
                TimeSlot.start_time < date + timedelta(days=1),
                TimeSlot.is_free == True
            )
        )
        slots = result.scalars().all()
    if not slots:
        await callback.message.answer("–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
        await callback.answer()
        return
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(
                text=f"{s.start_time.strftime('%H:%M')} - {s.end_time.strftime('%H:%M')}",
                callback_data=f"choose_slot_{s.id}"
            )] for s in slots
        ]
    )
    await callback.message.answer(f"–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ {date.strftime('%d.%m.%Y')}:", reply_markup=kb)
    await state.set_state(BookingFSM.slot)
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("choose_slot_"))
async def choose_slot(callback: types.CallbackQuery, state: FSMContext):
    slot_id = int(callback.data.replace("choose_slot_", ""))
    data = await state.get_data()
    massage_id = data.get("massage_id")
    date_str = data.get("date")
    async with async_session() as session:
        slot = await session.get(TimeSlot, slot_id)
        massage = await session.get(MassageType, massage_id)
        if not slot or not slot.is_free or not massage:
            await callback.message.answer("–°–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.answer()
            return
        booking = Booking(
            user_id=callback.from_user.id,
            user_name=callback.from_user.full_name,
            massage_type_id=massage_id,
            slot_id=slot_id
        )
        slot.is_free = False
        session.add(booking)
        await session.commit()
    await callback.message.answer(
        f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ <b>{massage.name}</b> "
        f"{slot.start_time.strftime('%d.%m.%Y')} "
        f"–≤ {slot.start_time.strftime('%H:%M')}! "
        f"–î–æ –≤—Å—Ç—Ä–µ—á–∏!", parse_mode="HTML"
    )
    await callback.message.answer(
        '–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
        reply_markup=get_main_menu()
    )
    await state.clear()
    await callback.answer()

# --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—Å–∞–∂–µ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ ---

@router.callback_query(F.data == "info")
async def info_massages_menu(callback: types.CallbackQuery, state: FSMContext):
    async with async_session() as session:
        result = await session.execute(select(MassageType))
        massages = result.scalars().all()
    if not massages:
        await callback.message.answer("–í–∏–¥—ã –º–∞—Å—Å–∞–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await callback.answer()
        return
    # –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Å –º–∞—Å—Å–∞–∂–∞–º–∏
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text=m.name, callback_data=f"massage_info_{m.id}")]
            for m in massages
        ] + [[types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    )
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –º–∞—Å—Å–∞–∂–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=kb
    )
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("massage_info_"))
async def show_massage_description(callback: types.CallbackQuery, state: FSMContext):
    massage_id = int(callback.data.replace("massage_info_", ""))
    async with async_session() as session:
        massage = await session.get(MassageType, massage_id)
    if not massage:
        await callback.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await callback.answer()
        return
    text = (
        f"<b>{massage.name}</b> ‚Äî {massage.duration} –º–∏–Ω, {massage.price} —Ä—É–±.\n\n"
        f"{massage.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è.'}"
    )
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –º–∞—Å—Å–∞–∂–µ–π"
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="info")]
        ]
    )
    await callback.message.edit_text(text, parse_mode='HTML', reply_markup=kb)
    await callback.answer()

# --- –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å ---
@router.callback_query(F.data == "cancel")
async def cancel_booking(callback: types.CallbackQuery, state: FSMContext):
    async with async_session() as session:
        result = await session.execute(
            select(Booking).where(Booking.user_id == callback.from_user.id)
        )
        booking = result.scalars().first()
        if not booking:
            await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
            await callback.answer()
            return
        massage = await session.get(MassageType, booking.massage_type_id)
        slot = await session.get(TimeSlot, booking.slot_id)
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"delete_booking_{booking.id}")],
            [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
    )
    await callback.message.answer(
        f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å:\n"
        f"<b>{massage.name}</b>\n"
        f"{slot.start_time.strftime('%d.%m.%Y %H:%M')} - {slot.end_time.strftime('%H:%M')}\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å:",
        parse_mode="HTML", reply_markup=kb
    )
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("delete_booking_"))
async def delete_booking(callback: types.CallbackQuery, state: FSMContext):
    booking_id = int(callback.data.replace("delete_booking_", ""))
    async with async_session() as session:
        booking = await session.get(Booking, booking_id)
        if not booking:
            await callback.message.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await callback.answer()
            return
        slot = await session.get(TimeSlot, booking.slot_id)
        if slot:
            slot.is_free = True
        await session.delete(booking)
        await session.commit()
    await callback.message.answer(
        "–í–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_main_menu()
    )
    await callback.answer()

# --- –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å ---
@router.callback_query(F.data == "reschedule")
async def reschedule_booking(callback: types.CallbackQuery, state: FSMContext):
    async with async_session() as session:
        result = await session.execute(
            select(Booking).where(Booking.user_id == callback.from_user.id)
        )
        booking = result.scalars().first()
        if not booking:
            await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
            await callback.answer()
            return
        massage = await session.get(MassageType, booking.massage_type_id)
        slot = await session.get(TimeSlot, booking.slot_id)
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è", callback_data=f"reschedule_booking_{booking.id}")],
            [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
    )
    await callback.message.answer(
        f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å:\n"
        f"<b>{massage.name}</b>\n"
        f"{slot.start_time.strftime('%d.%m.%Y %H:%M')} - {slot.end_time.strftime('%H:%M')}\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è:",
        parse_mode="HTML", reply_markup=kb
    )
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("reschedule_booking_"))
async def reschedule_booking_choose(callback: types.CallbackQuery, state: FSMContext):
    booking_id = int(callback.data.replace("reschedule_booking_", ""))
    async with async_session() as session:
        booking = await session.get(Booking, booking_id)
        if not booking:
            await callback.message.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await callback.answer()
            return
        await state.update_data(massage_id=booking.massage_type_id)
        slot = await session.get(TimeSlot, booking.slot_id)
        if slot:
            slot.is_free = True
        await session.delete(booking)
        await session.commit()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:")
    await show_calendar(callback.message, state)
    await callback.answer()

def register_client_handlers(dp):
    dp.include_router(router)
